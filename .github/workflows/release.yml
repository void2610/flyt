name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ジョブ1: アプリケーションのビルド
  build:
    runs-on: macos-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.3'

      - name: Build app
        run: |
          xcodebuild -project Flyt.xcodeproj \
            -scheme Flyt \
            -configuration Release \
            -derivedDataPath ./build \
            build

      - name: Create app bundle
        run: |
          # ビルド成果物のパス
          APP_PATH="./build/Build/Products/Release/Flyt.app"

          # アプリが存在するか確認
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: App not found at $APP_PATH"
            exit 1
          fi

          # ZIPファイルを作成
          cd ./build/Build/Products/Release
          zip -r Flyt.zip Flyt.app
          mv Flyt.zip ../../../../

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: flyt-app
          path: Flyt.zip
          retention-days: 1

  # ジョブ2: リリースノートの生成
  generate-notes:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得

      - name: Get previous tag
        id: get_previous_tag
        run: |
          PREV_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          echo "PREV_TAG=${PREV_TAG}" >> $GITHUB_OUTPUT

      - name: Get commit log
        id: get_commits
        run: |
          if [ -z "${{ steps.get_previous_tag.outputs.PREV_TAG }}" ]; then
            COMMITS=$(git log --stat --pretty=format:"## %s (%h)%n" --no-merges | head -n 200)
          else
            COMMITS=$(git log ${{ steps.get_previous_tag.outputs.PREV_TAG }}..HEAD --stat --pretty=format:"## %s (%h)%n" --no-merges)
          fi
          # 改行を保持するためにEOFを使用
          echo "COMMITS<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install anthropic

      - name: Generate Release Notes with Claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          VERSION: ${{ needs.build.outputs.version }}
          COMMITS: ${{ steps.get_commits.outputs.COMMITS }}
        run: |
          python3 << 'EOF'
          import os
          from anthropic import Anthropic

          # Claude APIクライアントを初期化
          client = Anthropic(api_key=os.environ['ANTHROPIC_API_KEY'])

          # 既存のRELEASE_NOTES.mdを読み込んでフォーマットを理解
          with open('RELEASE_NOTES.md', 'r', encoding='utf-8') as f:
              template = f.read()

          # プロンプトを作成
          prompt = f"""バージョン {os.environ['VERSION']} のリリースノートを生成してください。

          以下のコミット履歴から変更内容を分析し、ユーザー向けのリリースノートを作成してください：

          {os.environ['COMMITS']}

          以下のテンプレートフォーマットに従ってください：

          {template}

          重要な指示：
          1. 「主な変更点」セクションのみを記述してください
          2. 変更内容を「新機能」「改善」「バグ修正」に分類してください
          3. 各項目は1-2行で簡潔に記述してください（最大5項目程度）
          4. 技術的な詳細（ファイル名、実装方法など）は省略し、ユーザーにとってのメリットを重視してください
          5. 内部リファクタリングやビルド設定の変更など、ユーザーに影響のない変更は除外してください
          6. 日本語で自然に記述してください
          7. HTMLコメントは削除してください

          出力例：
          ## 主な変更点

          ### 新機能
          - ホットエッジ機能を追加（画面の辺にマウスを移動してタイマーを起動）

          ### 改善
          - タイマーUIのパフォーマンスを向上

          ## インストール方法
          ...（テンプレートをそのまま使用）

          RELEASE_NOTES.mdの完全な内容のみを出力してください。説明文などは不要です。"""

          # Claude APIを呼び出し
          message = client.messages.create(
              model="claude-sonnet-4-5-20250929",
              max_tokens=4096,
              messages=[
                  {"role": "user", "content": prompt}
              ]
          )

          # レスポンスを取得
          release_notes = message.content[0].text

          # RELEASE_NOTES.mdに書き込み
          with open('RELEASE_NOTES.md', 'w', encoding='utf-8') as f:
              f.write(release_notes)

          print("リリースノートを生成しました")
          EOF

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md
          retention-days: 1

  # ジョブ3: GitHubリリースの作成
  publish:
    runs-on: ubuntu-latest
    needs: [build, generate-notes]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: flyt-app

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes

      - name: Create GitHub Release
        run: |
          # 既存のリリースを削除（存在する場合）
          if gh release view ${{ needs.build.outputs.version }} > /dev/null 2>&1; then
            echo "既存のリリースを削除します"
            gh release delete ${{ needs.build.outputs.version }} -y
            sleep 2
          fi

          # リリースを作成
          gh release create ${{ needs.build.outputs.version }} \
            --title "Release ${{ needs.build.outputs.version }}" \
            --notes-file RELEASE_NOTES.md \
            Flyt.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
